internal class Program
{
    private static void Main(string[] args)
    {
        Supermarket supermarket = new Supermarket();
        supermarket.ShowMenu();
    }
}

public static class RandomProvider
{
    public static readonly Random Instance = new Random();
}

public class Product
{
    public Product(string name, int price)
    {
        Name = name;
        Price = price;
    }

    public string Name { get; private set; }
    public int Price { get; private set; }

    public void ShowInfo()
    {
        Console.WriteLine($"Наименование продукта - {Name}, стоимость - {Price} руб.");
    }
}

public class Client
{
    private List<Product> _shoppingBasket = new List<Product>();

    public Client(int money)
    {
        Money = money;
    }

    public int Money { get; private set; }

    public List<Product> GetShoppingBasket()
    {
        return _shoppingBasket;
    }

    public bool PayForBasket(int sum)
    {
        if(Money >= sum)
        {
            Money -= sum;
            return true;
        }
        else
        {
            RemoveFromBasket();
            return false;
        }
    }

    public void AddProductToBasket(Product product)
    {
        _shoppingBasket.Add(product);
    }

    public void RemoveFromBasket()
    {
        if (_shoppingBasket.Count > 0)
        {
            int randomIndex = RandomProvider.Instance.Next(_shoppingBasket.Count);
            _shoppingBasket.RemoveAt(randomIndex);
        }
    }

    public void ClearBasket()
    {
        _shoppingBasket.Clear();
    }
}

public class Checkout
{
    public int ProcessAllClients(Queue<Client> clients, List<Product> products)
    {
        int earnings = 0;

        while (clients.Count > 0)
        {
            Client client = clients.Dequeue();
            FillBasketRandomProducts(client, products);

            int payment = ProcessPayment(client);

            if (payment > 0)
            {
                Console.WriteLine("Клиент оплатил продукты.");
                earnings += payment;
            }
            else
            {
                Console.WriteLine("Клиент не смог оплатить продукты и уходит из магазина.");
            }
        }

        return earnings;
    }

    private int ProcessPayment(Client client)
    {
        int sum = CalculateBasket(client);

        if (client.PayForBasket(sum))
        {
            ShowReceipt(client, sum);
            client.ClearBasket();
            return sum;
        }

        return 0;
    }

    private int CalculateBasket(Client client)
    {
        int sum = 0;

        foreach (var product in client.GetShoppingBasket())
        {
            sum += product.Price;
        }

        return sum;
    }

    private void ShowReceipt(Client client, int sum)
    {
        Console.WriteLine("----------- Чек клиента ------------ ");

        foreach (var product in client.GetShoppingBasket())
        {
            product.ShowInfo();
        }

        Console.WriteLine("-------------------------------------");
        Console.WriteLine($"Итого к оплате: {sum} руб.");
        Console.WriteLine("-------------------------------------");
    }

    private void FillBasketRandomProducts(Client client, List<Product> products)
    {
        int minNumberProducts = 1;
        int maxNumberProducts = 10;
        int productCount = RandomProvider.Instance.Next(minNumberProducts, maxNumberProducts + 1);

        for (int i = 0; i < productCount; i++)
        {
            Product product = products[RandomProvider.Instance.Next(products.Count)];
            client.AddProductToBasket(product);
        }
    }
}

public class Supermarket
{
    private Queue<Client> _clients = new Queue<Client>();
    private List<Product> _products;
    private Checkout _checkout = new Checkout();
    private int _earnings = 0;

    public Supermarket()
    {
        _products = new List<Product>
        {
            new Product("Апельсин", 30),
            new Product("Помидор", 10),
            new Product("Картофель", 5),
            new Product("Хлеб", 25),
            new Product("Молоко", 40),
        };
    }

    public void ShowMenu()
    {
        int dayToSimulate;
        bool isProgramWork = true;

        while (isProgramWork)
        {
            Console.WriteLine("Введите количество рабочих дней или 'exit' для выхода: ");
            string userInput = Console.ReadLine();

            if (userInput.ToLower() == "exit")
            {
                isProgramWork = false;
                continue;
            }

            bool number = int.TryParse(userInput, out dayToSimulate);

            if(number && dayToSimulate > 0)
            {
                for (int i = 0; i < dayToSimulate; i++)
                {
                    Console.WriteLine($"День - {i + 1}: ");
                    StartDay();
                }
            }
            else
            {
                Console.WriteLine("Некорректный ввод.");
            }
        }

        Console.WriteLine("Вы вышли из программы. Нажмите любую клавишу для продолжения.");
        Console.ReadKey();
    } 

    private void StartDay()
    {
        GenerateClients(1, 10);

        Console.WriteLine($"Начало рабочего дня. Количество клиентов: {_clients.Count}. Баланс: {_earnings} руб.");

        _earnings += _checkout.ProcessAllClients(_clients, _products);
        Console.WriteLine($"Конец рабочего дня. Баланс {_earnings} руб.");
    }

    private void GenerateClients(int minClients, int maxClients)
    {
        int clientCount = RandomProvider.Instance.Next(minClients, maxClients + 1);
        int minQuantityMoneyCLient = 20;
        int maxQuantityMoneyCLient = 200;

        for (int i = 0; i < clientCount; i++)
        {
            int money = RandomProvider.Instance.Next(minQuantityMoneyCLient, maxQuantityMoneyCLient + 1);
            Client client = new Client(money);
            _clients.Enqueue(client);
        }
    }
}
